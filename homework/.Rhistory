log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
intervals <- get_intervals(x = x, k = k, ls = log_f(x), dls = log_f_prime(x),
lower_endpoint = 0, upper_endpoint = Inf)
x_new <- 11
grid_new <- update_grid(x_new, log_f(x_new), log_f_prime(x_new), 5,
x, k, log_f(x), log_f_prime(x),
intervals$z, intervals$unnorm_p)
# the new grid better approximates the density, so the sum of the
# unnormalized probabilities should be closer to 1
expect_gte(sum(grid_new$unnorm_p), 1)
expect_true(all(grid_new$unnorm_p >= 0))
expect_lte(sum(grid_new$unnorm_p), sum(intervals$unnorm_p))
# now, since we inserted the new grid point to the right, interval endpoints
# not affected by the new grid point should have remained the same
expect_identical(grid_new$x[1:5], x)
expect_identical(grid_new$z[c(1:5, 7)], intervals$z)
expect_identical(grid_new$unnorm_p[1:4], intervals$unnorm_p[1:4])
# double check that updating the grid produces the same results as creating the
# grid from scratch with the expanded xs
intervals_new <- get_intervals(x = grid_new$x, k = k+1,
ls = log_f(grid_new$x),
dls = log_f_prime(grid_new$x),
lower_endpoint = 0, upper_endpoint = Inf)
expect_identical(grid_new$z, intervals_new$z)
expect_identical(grid_new$unnorm_p, intervals_new$unnorm_p)
})
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
intervals <- get_intervals(x = x, k = k, ls = log_f(x), dls = log_f_prime(x),
lower_endpoint = 0, upper_endpoint = Inf)
x
x_new <- 3
grid_new <- update_grid(x_new, log_f(x_new), log_f_prime(x_new), 2,
x, k, log_f(x), log_f_prime(x),
intervals$z, intervals$unnorm_p)
x_new
grid_new
grid_new$x
sum(grid_new$unnorm_p)
sum(intervals$unnorm_p)
grid_new$x[c(1:2, 4:6)]
grid_new$z
intervals$z
grid_new$unnorm_p
intervals$unnorm_p
intervals$unnorm_p[c(1, 4:5)]
grid_new$unnorm_p[c(1, 5:6)]
# finally, insert a point in the middle of existing grid points
test_that("grid update test 3 values", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
intervals <- get_intervals(x = x, k = k, ls = log_f(x), dls = log_f_prime(x),
lower_endpoint = 0, upper_endpoint = Inf)
x_new <- 3
grid_new <- update_grid(x_new, log_f(x_new), log_f_prime(x_new), 2,
x, k, log_f(x), log_f_prime(x),
intervals$z, intervals$unnorm_p)
# the new grid better approximates the density, so the sum of the
# unnormalized probabilities should be closer to 1
expect_gte(sum(grid_new$unnorm_p), 1)
expect_true(all(grid_new$unnorm_p >= 0))
expect_lte(sum(grid_new$unnorm_p), sum(intervals$unnorm_p))
# now, since we inserted the new grid point, interval endpoints
# not affected by the new grid point should have remained the same
expect_identical(grid_new$x[c(1:2, 4:6)], x)
expect_identical(grid_new$z[c(1:2, 5:7)], intervals$z)
expect_identical(grid_new$unnorm_p[c(1, 5:6)], intervals$unnorm_p[c(1, 4:5)])
# double check that updating the grid produces the same results as creating the
# grid from scratch with the expanded xs
intervals_new <- get_intervals(x = grid_new$x, k = k+1,
ls = log_f(grid_new$x),
dls = log_f_prime(grid_new$x),
lower_endpoint = 0, upper_endpoint = Inf)
expect_identical(grid_new$z, intervals_new$z)
expect_identical(grid_new$unnorm_p, intervals_new$unnorm_p)
})
grid_new$z[c(1:2, 5:7)]
intervals$z
# finally, insert a point in the middle of existing grid points
test_that("grid update test 3 values", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
intervals <- get_intervals(x = x, k = k, ls = log_f(x), dls = log_f_prime(x),
lower_endpoint = 0, upper_endpoint = Inf)
x_new <- 3
grid_new <- update_grid(x_new, log_f(x_new), log_f_prime(x_new), 2,
x, k, log_f(x), log_f_prime(x),
intervals$z, intervals$unnorm_p)
# the new grid better approximates the density, so the sum of the
# unnormalized probabilities should be closer to 1
expect_gte(sum(grid_new$unnorm_p), 1)
expect_true(all(grid_new$unnorm_p >= 0))
expect_lte(sum(grid_new$unnorm_p), sum(intervals$unnorm_p))
# now, since we inserted the new grid point, interval endpoints
# not affected by the new grid point should have remained the same
expect_identical(grid_new$x[c(1:2, 4:6)], x)
expect_identical(grid_new$z[c(1:2, 5:7)], intervals$z[c(1:2, 4:5)])
expect_identical(grid_new$unnorm_p[c(1, 5:6)], intervals$unnorm_p[c(1, 4:5)])
# double check that updating the grid produces the same results as creating the
# grid from scratch with the expanded xs
intervals_new <- get_intervals(x = grid_new$x, k = k+1,
ls = log_f(grid_new$x),
dls = log_f_prime(grid_new$x),
lower_endpoint = 0, upper_endpoint = Inf)
expect_identical(grid_new$z, intervals_new$z)
expect_identical(grid_new$unnorm_p, intervals_new$unnorm_p)
})
grid_new$z[c(1:2, 5:7)]
# finally, insert a point in the middle of existing grid points
test_that("grid update test 3 values", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
intervals <- get_intervals(x = x, k = k, ls = log_f(x), dls = log_f_prime(x),
lower_endpoint = 0, upper_endpoint = Inf)
x_new <- 3
grid_new <- update_grid(x_new, log_f(x_new), log_f_prime(x_new), 2,
x, k, log_f(x), log_f_prime(x),
intervals$z, intervals$unnorm_p)
# the new grid better approximates the density, so the sum of the
# unnormalized probabilities should be closer to 1
expect_gte(sum(grid_new$unnorm_p), 1)
expect_true(all(grid_new$unnorm_p >= 0))
expect_lte(sum(grid_new$unnorm_p), sum(intervals$unnorm_p))
# now, since we inserted the new grid point, interval endpoints
# not affected by the new grid point should have remained the same
expect_identical(grid_new$x[c(1:2, 4:6)], x)
expect_identical(grid_new$z[c(1:2, 5:7)], intervals$z[c(1:2, 4:6)])
expect_identical(grid_new$unnorm_p[c(1, 5:6)], intervals$unnorm_p[c(1, 4:5)])
# double check that updating the grid produces the same results as creating the
# grid from scratch with the expanded xs
intervals_new <- get_intervals(x = grid_new$x, k = k+1,
ls = log_f(grid_new$x),
dls = log_f_prime(grid_new$x),
lower_endpoint = 0, upper_endpoint = Inf)
expect_identical(grid_new$z, intervals_new$z)
expect_identical(grid_new$unnorm_p, intervals_new$unnorm_p)
})
adaptive_sampling <- function(n, x, log_f, log_f_prime, lower_endpoint, upper_endpoint,
trace=F){
samp_x <- rep(NA, n)
m <- 0 # count the number of acceptances
attempt_results <- c()
# evaluate log f and derivative at the initial grid points
ls <- log_f(x)
dls <- log_f_prime(x)
# get the initial intervals
intervals <- get_intervals(x, k, ls, dls, lower_endpoint, upper_endpoint)
z <- intervals$z
unnorm_p <- intervals$unnorm_p
while(m < n){
# sample from envelope
e_samp <- sample_envelope(x, k, ls, dls, z, unnorm_p)
y <- e_samp$y
i <- e_samp$i
# acceptance-rejection
e_star <- ls[i] + (y - x[i])*dls[i]
# the sampled y is between z_{i-1} and z_i. So, y is either > x_i or < x_i
# if y is below x[1] or above x[k], assign negative infinity
if(y < x[1]){
s_star <- -Inf
idx <- 0
} else if(y > x[k]){
s_star <- Inf
idx <- k
} else if(y < x[i]){
s_star <- ((x[i] - y)*ls[i-1] + (y - x[i-1])*ls[i])/(x[i] - x[i-1])
idx <- i - 1
} else {
s_star <- ((x[i+1] - y)*ls[i] + (y - x[i])*ls[i+1])/(x[i+1] - x[i])
idx <- i
}
u <- runif(1)
if(log(u) <= s_star - e_star){
m <- m + 1
samp_x[m] <- y
if(trace){
attempt_results <- c(attempt_results, 1)
}
} else if(log(u) <= log_f(y) - e_star){
m <- m + 1
samp_x[m] <- y
if(trace){
attempt_results <- c(attempt_results, 1)
}
new_grid <- update_grid(y, log_f(y), log_f_prime(y),
idx, x, k, ls, dls, z, unnorm_p)
k <- k + 1
x <- new_grid$x
z <- new_grid$z
ls <- new_grid$ls
dls <- new_grid$dls
unnorm_p <- new_grid$unnorm_p
} else {
if(trace){
attempt_results <- c(attempt_results, 0)
}
}
}
if(trace){
output <- list("samp_x" = samp_x,
"x" = x,
"z" = z,
"unnorm_p" = unnorm_p,
"attempt_results" = attempt_results)
} else {
output <- list("samp_x" = samp_x,
"x" = x,
"z" = z,
"unnorm_p" = unnorm_p)
}
return(output)
}
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
res
# test that the function produces the appropriate type of output, and that
# the trace flag works
test_that("adaptive sampling test 1 return", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_type(res, "list")
expect_length(res, 5)
})
# test that the function produces the appropriate type of output, and that
# the trace flag works
test_that("adaptive sampling test 1 return", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_type(res, "list")
expect_length(res, 4)
})
names(res)
# test that the function produces the appropriate type of output, and that
# the trace flag works
test_that("adaptive sampling test 1 return", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_type(res, "list")
expect_length(res, 4)
expect_identical(names(res), c("samp_x", "x", "z", "unnorm_p"))
# with the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_type(res, "list")
expect_length(res, 5)
expect_identical(names(res), c("samp_x", "x", "z", "unnorm_p", "attempt_results"))
})
# test that the function produces the appropriate type of output, and that
# the trace flag works
test_that("adaptive sampling test 1 return", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_type(res, "list")
expect_length(res, 4)
expect_identical(names(res), c("samp_x", "x", "z", "unnorm_p"))
# with the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf, trace=T)
expect_type(res, "list")
expect_length(res, 5)
expect_identical(names(res), c("samp_x", "x", "z", "unnorm_p", "attempt_results"))
})
# test that the values returned make sense (e.g. the interval endpoints are ordered,
# everything is the correct length, etc.)
test_that("adaptive sampling test 1 values", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_length(res$samp_x, 10000)
expect_equal(length(res$x) + 1, length(res$z))
expect_gte(sum(res$unnorm_p), 1)
})
# test that the values returned make sense (e.g. the interval endpoints are ordered,
# everything is the correct length, etc.)
test_that("adaptive sampling test 1 values", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_length(res$samp_x, 10000)
expect_equal(length(res$x) + 1, length(res$z))
expect_gte(sum(res$unnorm_p), 1)
expect_true(all(res$unnorm_p >= 0))
expect_false(is.unsorted(res$x))
expect_false(is.unsorted(res$z))
})
# test that the values returned make sense (e.g. the interval endpoints are ordered,
# everything is the correct length, etc.)
test_that("adaptive sampling test 1 values", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_length(res$samp_x, 10000)
expect_equal(length(res$x) + 1, length(res$z))
expect_gte(sum(res$unnorm_p), 1)
expect_true(all(res$unnorm_p >= 0))
expect_false(is.unsorted(res$x))
expect_false(is.unsorted(res$z))
# all the sampled values should be unique
expect_length(unique(res$samp_x), 10000)
})
# test that the values returned make sense (e.g. the interval endpoints are ordered,
# everything is the correct length, etc.)
test_that("adaptive sampling test 1 values", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_length(res$samp_x, 10000)
expect_equal(length(res$x) + 1, length(res$z))
expect_gte(sum(res$unnorm_p), 1)
expect_true(all(res$unnorm_p >= 0))
expect_false(is.unsorted(res$x))
expect_false(is.unsorted(res$z))
# all the sampled values should be unique
expect_length(unique(res$samp_x), 10000)
# the interval endpoints should fall between the grid points
expect_true(all(res$x <= res$z[2:length(res$z)]))
expect_true(all(res$x >= res$z[1:(length(res$z) - 1)]))
})
# with the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf, trace=T)
plot(res$attempt_results)
# test that the values returned make sense (e.g. the interval endpoints are ordered,
# everything is the correct length, etc.)
test_that("adaptive sampling test 1 values", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_length(res$samp_x, 10000)
expect_equal(length(res$x) + 1, length(res$z))
expect_gte(sum(res$unnorm_p), 1)
expect_true(all(res$unnorm_p >= 0))
expect_false(is.unsorted(res$x))
expect_false(is.unsorted(res$z))
# all the sampled values should be unique
expect_length(unique(res$samp_x), 10000)
# the interval endpoints should fall between the grid points
expect_true(all(res$x <= res$z[2:length(res$z)]))
expect_true(all(res$x >= res$z[1:(length(res$z) - 1)]))
# with the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf, trace=T)
# the rate of accepted points should increase over time
expect_gte(mean(res$attempt_results[1:100]), mean(res$attempt_results))
expect_gte(mean(res$attempt_results[1:100]), mean(res$attempt_results[9901:10000]))
})
mean(res$attempt_results[1:100])
mean(res$attempt_results[9901:10000])
# test that the values returned make sense (e.g. the interval endpoints are ordered,
# everything is the correct length, etc.)
test_that("adaptive sampling test 1 values", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_length(res$samp_x, 10000)
expect_equal(length(res$x) + 1, length(res$z))
expect_gte(sum(res$unnorm_p), 1)
expect_true(all(res$unnorm_p >= 0))
expect_false(is.unsorted(res$x))
expect_false(is.unsorted(res$z))
# all the sampled values should be unique
expect_length(unique(res$samp_x), 10000)
# the interval endpoints should fall between the grid points
expect_true(all(res$x <= res$z[2:length(res$z)]))
expect_true(all(res$x >= res$z[1:(length(res$z) - 1)]))
# with the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf, trace=T)
# the rate of accepted points should increase over time
expect_lte(mean(res$attempt_results[1:100]), mean(res$attempt_results))
expect_lte(mean(res$attempt_results[1:100]), mean(res$attempt_results[9901:10000]))
})
# now do a KS test to verify that our distribution matches the desired distribution
test_that("adaptive sampling test 1 distribution", {
k <- 5
x <- seq(0.1, 10, length = k)
log_f <- function(t){log_f_rayleigh(t, 2)}
log_f_prime <- function(t){log_f_prime_rayleigh(t, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, Inf)
expect_gt(ks.test(res$samp_x, function(t){1 - exp(-t^2/8)})$p.value, 0.01)
})
ks.test(res$samp_x, function(t){1 - exp(-t^2/8)})
?beta
beta(2, 2)
1/6
# functions for the beta distribution
log_f_beta <- function(x, a, b){
(a-1)*log(x) + (b-1)*log(1-x) - log(beta(a, b))
}
log_f_beta(0.5, 2, 2)
dbeta(0.5, 2, 2, log=T)
k <- 5
x <- seq(0.1, 0.9, length = k)
x
k <- 5
x <- seq(0.05, 0.95, length = k)
x
k <- 5
x <- seq(0.05, 0.95, length = k)
log_f <- function(t){log_f_beta(t, 2, 2)}
log_f_prime <- function(t){log_f_prime_beta(t, 2, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, 1)
# functions for the beta distribution
log_f_beta <- function(x, a, b){
(a-1)*log(x) + (b-1)*log(1-x) - log(beta(a, b))
}
log_f_prime_beta <- function(x, a, b){
(a-1)/x - (b-1)/(1-x)
}
k <- 5
x <- seq(0.05, 0.95, length = k)
log_f <- function(t){log_f_beta(t, 2, 2)}
log_f_prime <- function(t){log_f_prime_beta(t, 2, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, 1)
hist(res$samp_x)
k <- 6
x <- seq(0.05, 0.95, length = k)
log_f <- function(t){log_f_beta(t, 2, 2)}
log_f_prime <- function(t){log_f_prime_beta(t, 2, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, 1)
hist(res$samp_x)
test_that("adaptive sampling test 1 distribution", {
k <- 6
x <- seq(0.05, 0.95, length = k)
log_f <- function(t){log_f_beta(t, 2, 2)}
log_f_prime <- function(t){log_f_prime_beta(t, 2, 2)}
# without the trace flag
res <- adaptive_sampling(10000, x, log_f, log_f_prime, 0, 1)
expect_gt(ks.test(res$samp_x, function(t){pbeta(t, 2, 2)})$p.value, 0.01)
})
ks.test(res$samp_x, function(t){pbeta(t, 2, 2)})
R.version.string
setwd("~/Documents/Teaching/sta379-s25/sta379-s25.github.io/homework")
my_ecdf1 <- function(x, t){
return(sapply(t, function(ti){mean(x <= ti)}))
}
my_ecdf2 <- function(x){
function(t){
return(sapply(t, function(ti){mean(x <= ti)}))
}
}
diehard_permtest <- function(x, chunk_size = 3){
perms <- combinat::permn(1:chunk_size)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - chunk_size, chunk_size)){
cur_order <- paste0(order(x[i:(i+chunk_size - 1)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
return(list(perm_counts = perm_counts,
p_value = chisq.test(perm_counts)$p.value))
}
my_lcg <- function(n, x0 = NA, m = 2^32, a = 1664525, c = 1013904223){
if(is.na(x0)){
x0 <- ((Sys.time() |> lubridate::second()) * 100000) %% m
}
x <- rep(NA, n+1)
x[1] <- x0
for(i in 1:n){
x[i+1] <- (a * x[i] + c) %% m
}
return(x/m)
}
test_file("hw1_tests.R")
blah <- test_file("hw1_tests.R")
blah
test_file("hw1_tests.R")
