load("~/Documents/usproc/usproc_fa_24/02 Verification Emails/VerifyEmail.RData")
View(finalUSPROCgroup)
finalUSPROCgroup$FacultyEmail
write.csv(finalUSPROCgroup$FacultyEmail, "~/Documents/usproc/usproc_fa_24/02 Verification Emails/faculty_emails.csv")
?Rcpp
checkpoints_eoc <-read.csv("https://www.dropbox.com/scl/fi/3xda6hny48ojknoifupul/checkpoints_eoc.csv?rlkey=q6rksum9wc91pkte2qdg31s33&st=fr0rynut&dl=1")
View(checkpoints_eoc)
Rcpp::cppFunction('double kurtosis_C(arma::vec x) {
arma::vec diffs = x - mean(x);
return mean(pow(abs(diffs), 4))/pow(mean(square(diffs)), 2) - 3;
}', depends = "RcppArmadillo")
kurtosis_C(1:5)
kurtosis_C(1:10)
Rcpp::cppFunction('double kurtosis_C(arma::vec x) {
arma::vec diffs = x - mean(x);
return mean(pow(diffs, 4))/pow(mean(square(diffs)), 2) - 3;
}', depends = "RcppArmadillo")
Rcpp::cppFunction('double kurtosis_C(arma::vec x) {
arma::vec diffs = x - mean(x);
return mean(pow(abs(diffs), 4))/pow(mean(square(diffs)), 2) - 3;
}', depends = "RcppArmadillo")
kurtosis_C(c( 0, 3, 4, 1, 2, 3, 0, 2, 1, 3, 2, 0, 2, 2, 3, 2, 5, 2, 3, 999))
Rcpp::cppFunction('double cor_C(arma::vec x, arma::vec y) {
arma::vec diffsx = x - mean(x);
arma::vec diffsy = y - mean(y);
double numerator = sum(diffsx % diffsy);
double denominator = sqrt(sum(square(diffsx))) * sqrt(sum(square(diffsy)));
return numerator/denominator;
}', depends = "RcppArmadillo")
Rcpp::cppFunction('double cor_C2(arma::vec x, arma::vec y) {
arma::vec diffsx = x - mean(x);
arma::vec diffsy = y - mean(y);
return sum(diffsx % diffsy)/sqrt(sum(square(diffsx))) * sqrt(sum(square(diffsy)));
}', depends = "RcppArmadillo")
x <- runif(100)
y <- runif(100)
bench::mark(cor_C(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
cor_C(x,y)
cor_C2(x,y)
Rcpp::cppFunction('double cor_C2(arma::vec x, arma::vec y) {
arma::vec diffsx = x - mean(x);
arma::vec diffsy = y - mean(y);
return sum(diffsx % diffsy)/(sqrt(sum(square(diffsx))) * sqrt(sum(square(diffsy))));
}', depends = "RcppArmadillo")
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
x <- runif(10000)
y <- runif(10000)
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
x <- runif(10)
y <- runif(10)
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
x <- runif(1000)
y <- runif(1000)
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
x <- runif(100)
y <- runif(100)
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
x <- rnorm(10000)
y <- rnorm(10000)
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
bench::mark(cor_C(x, y), cor_C2(x, y))
Rcpp::cppFunction('double cor_C(arma::vec x, arma::vec y) {
arma::vec diffsx = x - mean(x);
arma::vec diffsy = y - mean(y);
return sum(diffsx % diffsy)/(sqrt(sum(square(diffsx))) * sqrt(sum(square(diffsy))));
}', depends = "RcppArmadillo")
cor_C(x, y)
cor(x, y)
bench::mark(cor_C(x, y), cor(x, y))
bench::mark(cor_C(x, y), cor(x, y))
bench::mark(cor_C(x, y), cor(x, y))
bench::mark(cor_C(x, y), cor(x, y))
gridpts <- seq(0, 1, 0.01)
x <- dbeta(gridpts, 2.7, 6.3)
plot(gridpts, x, type="l")
gridpts <- seq(0, 1, 0.01)
x <- dbeta(gridpts, 2.7, 6.3)
y <- dunif(gridpts)
c = 2.68
plot(gridpts,x,xlim=c(0,1),ylim=c(0,2.8),type="l",col="blue",main="",xlab="",ylab="")
lines(gridpts,x,col="red")
legend(.6,2,c("Target Density","Easier Density"),lty=c(1,1),col=c("blue","red"))
gridpts <- seq(0, 1, 0.01)
x <- dbeta(gridpts, 2.7, 6.3)
y <- dunif(gridpts)
c = 2.68
plot(gridpts,x,xlim=c(0,1),ylim=c(0,2.8),type="l",col="blue",main="",xlab="",ylab="")
lines(gridpts,y,col="red")
legend(.6,2,c("Target Density","Easier Density"),lty=c(1,1),col=c("blue","red"))
?vline
gridpts <- seq(0, 1, 0.01)
x <- dbeta(gridpts, 2.7, 6.3)
y <- dunif(gridpts)
c = 2.68
plot(gridpts,x,xlim=c(0,1),ylim=c(0,2.8),type="l",col="blue",main="",xlab="",ylab="",
lwd=1.5)
lines(gridpts,c*y,col="red", lwd=1.5)
abline(v=0.6)
gridpts <- seq(0, 1, 0.01)
x <- dbeta(gridpts, 2.7, 6.3)
y <- dunif(gridpts)
c = 2.68
plot(gridpts,x,xlim=c(0,1),ylim=c(0,2.8),type="l",col="blue",main="",xlab="",ylab="",
lwd=1.5)
lines(gridpts,c*y,col="red", lwd=1.5)
abline(v=0.65)
gridpts <- seq(0, 1, 0.01)
x <- dbeta(gridpts, 2.7, 6.3)
y <- dunif(gridpts)
c = 2.68
plot(gridpts,x,xlim=c(0,1),ylim=c(0,2.8),type="l",col="blue",main="",xlab="",ylab="",
lwd=1.5)
lines(gridpts,c*y,col="red", lwd=1.5)
abline(v=0.5)
gridpts <- seq(0, 1, 0.01)
x <- dbeta(gridpts, 2.7, 6.3)
y <- dunif(gridpts)
c = 2.68
plot(gridpts,x,xlim=c(0,1),ylim=c(0,2.8),type="l",col="blue",main="",xlab="",ylab="",
lwd=1.5)
lines(gridpts,c*y,col="red", lwd=1.5)
abline(v=0.25)
