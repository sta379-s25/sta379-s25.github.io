perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - 3, 3)){
cur_order <- paste0(order(x[i:(i+2)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
perm_counts
chisq.test(perm_counts)
x <- my_lcg(1000)
perms <- combinat::permn(1:3)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - 3, 3)){
cur_order <- paste0(order(x[i:(i+2)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
perm_counts
chisq.test(perm_counts)
x <- my_lcg(1000)
perms <- combinat::permn(1:3)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - 3, 3)){
cur_order <- paste0(order(x[i:(i+2)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
perm_counts
chisq.test(perm_counts)
x <- my_lcg(1000)
perms <- combinat::permn(1:3)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - 3, 3)){
cur_order <- paste0(order(x[i:(i+2)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
perm_counts
chisq.test(perm_counts)
x <- my_lcg(1000)
perms <- combinat::permn(1:3)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - 3, 3)){
cur_order <- paste0(order(x[i:(i+2)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
perm_counts
chisq.test(perm_counts)
x <- my_lcg(1000)
perms <- combinat::permn(1:3)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - 3, 3)){
cur_order <- paste0(order(x[i:(i+2)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
perm_counts
chisq.test(perm_counts)
x <- runif(10)
x
sort(x)
factorial(3)
1024/6
order(c(0.5, 0.3, 0.7))
paste0(c(2, 1, 3), collapse="")
blah <- chisq.test(perm_counts)
blah$p.value
diehard_permtest <- function(x, chunk_size = 3){
perms <- combinat::permn(1:chunk_size)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - chunk_size, chunk_size)){
cur_order <- paste0(order(x[i:(i+chunk_size - 1)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
return(perm_counts = perm_counts,
p_value = chisq.test(perm_counts)$p.value)
}
set.seed(379)
x <- runif(18000)
diehard_permtest(x)
chunk_size = 3
perms <- combinat::permn(1:chunk_size)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - chunk_size, chunk_size)){
cur_order <- paste0(order(x[i:(i+chunk_size - 1)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
perm_counts
chisq.test(perm_counts)$p.value
diehard_permtest <- function(x, chunk_size = 3){
perms <- combinat::permn(1:chunk_size)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - chunk_size, chunk_size)){
cur_order <- paste0(order(x[i:(i+chunk_size - 1)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
return(counts = perm_counts,
p_value = chisq.test(perm_counts)$p.value)
}
set.seed(379)
x <- runif(18000)
diehard_permtest(x)
diehard_permtest <- function(x, chunk_size = 3){
perms <- combinat::permn(1:chunk_size)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - chunk_size, chunk_size)){
cur_order <- paste0(order(x[i:(i+chunk_size - 1)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
return(list(perm_counts = perm_counts,
p_value = chisq.test(perm_counts)$p.value))
}
set.seed(379)
x <- runif(18000)
diehard_permtest(x)
set.seed(379)
x <- runif(18000)
diehard_permtest(x)
set.seed(311)
x <- runif(18000)
diehard_permtest(x)
factorial(4)
24*4
24*4*100
set.seed(311)
x <- runif(9600)
diehard_permtest(x, chunk_size = 4)
set.seed(121)
x <- runif(9600)
diehard_permtest(x, chunk_size = 4)
set.seed(147)
x <- runif(9600)
diehard_permtest(x, chunk_size = 4)
x <- my_lcg(1000, x0=12, m=1024, a=1, c=1)
diehard_permtest(x, chunk_size = 4)
x <- my_lcg(1000, x0=12, m=1024, a=1, c=1)
diehard_permtest(x, chunk_size = 3)
x <- my_lcg(18000, x0=12, m=2^32, a=1664525, c=1013904223)
diehard_permtest(x, chunk_size = 3)
x <- my_lcg(18000, x0=50, m=2^32, a=1664525, c=1013904223)
diehard_permtest(x, chunk_size = 3)
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
library(testthat)
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
?test_that
set.seed(3)
test_that("ECDF test 1", {
set.seed(3)
x <- runif(100)
expect_equal(my_ecdf1(x, seq(0, 1, 0.1)),
ecdf(x)(seq(0, 1, 0.1)))
})
my_ecdf1 <- function(x, t){
return(sapply(t, function(ti){mean(x <= ti)}))
}
my_ecdf2 <- function(x){
function(t){
return(sapply(t, function(ti){mean(x <= ti)}))
}
}
diehard_permtest <- function(x, chunk_size = 3){
perms <- combinat::permn(1:chunk_size)
perms <- sapply(perms, function(x){paste0(x, collapse="")})
perm_counts <- rep(0, length(perms))
names(perm_counts) <- perms
for(i in seq(1, length(x) - chunk_size, chunk_size)){
cur_order <- paste0(order(x[i:(i+chunk_size - 1)]), collapse="")
perm_counts[cur_order] <- perm_counts[cur_order] + 1
}
return(list(perm_counts = perm_counts,
p_value = chisq.test(perm_counts)$p.value))
}
my_lcg <- function(n, x0 = NA, m = 2^32, a = 1664525, c = 1013904223){
if(is.na(x0)){
x0 <- ((Sys.time() |> lubridate::second()) * 100000) %% m
}
x <- rep(NA, n+1)
x[1] <- x0
for(i in 1:n){
x[i+1] <- (a * x[i] + c) %% m
}
return(x/m)
}
test_that("ECDF test 1", {
set.seed(3)
x <- runif(100)
expect_equal(my_ecdf1(x, seq(0, 1, 0.1)),
ecdf(x)(seq(0, 1, 0.1)))
})
test_that("ECDF test 2", {
set.seed(3)
x <- runif(100)
expect_equal(my_ecdf2(x)(seq(0, 1, 0.1)),
ecdf(x)(seq(0, 1, 0.1)))
})
set.seed(311)
x <- runif(18000)
diehard_results <- diehard_permtest(x)
diehard_results
test_that("Diehard test 1", {
set.seed(311)
x <- runif(18000)
diehard_results <- diehard_permtest(x)
expect_equal(diehard_results$perm_counts,
c(995, 985, 1018, 986, 982, 1033))
expect_equal(diehard_results$p_value, 0.8232593)
})
diehard_results$perm_counts
c(diehard_results$perm_counts)
unname(diehard_results$perm_counts)
test_that("Diehard test 1", {
set.seed(311)
x <- runif(18000)
diehard_results <- diehard_permtest(x)
expect_equal(unname(diehard_results$perm_counts),
c(995, 985, 1018, 986, 982, 1033))
expect_equal(diehard_results$p_value, 0.8232593)
})
set.seed(147)
x <- runif(9600)
diehard_results <- diehard_permtest(x, chunk_size = 4)
unname(diehard_results$perm_counts)
diehard_results
test_that("Diehard test 2", {
set.seed(147)
x <- runif(9600)
diehard_results <- diehard_permtest(x, chunk_size = 4)
expect_equal(unname(diehard_results$perm_counts),
c(104, 81, 106, 101, 90, 81, 108, 92, 105, 100, 111, 111, 114,
99, 107, 86, 112, 108, 101, 94, 106, 92, 96, 94))
expect_equal(diehard_results$p_value, 0.5750799)
})
?expect_equal
test_that("Diehard test 2", {
set.seed(147)
x <- runif(9600)
diehard_results <- diehard_permtest(x, chunk_size = 4)
expect_equal(unname(diehard_results$perm_counts),
c(104, 81, 106, 101, 90, 81, 108, 92, 105, 100, 111, 111, 114,
99, 107, 86, 112, 108, 101, 94, 106, 92, 96, 94))
expect_equal(diehard_results$p_value, 0.5750799, tolerance = 1e-06)
})
test_that("Diehard test 1", {
set.seed(311)
x <- runif(18000)
diehard_results <- diehard_permtest(x)
expect_equal(unname(diehard_results$perm_counts),
c(995, 985, 1018, 986, 982, 1033))
expect_equal(diehard_results$p_value, 0.8232593, tolerance = 1e-06)
})
test_that("Diehard test 2", {
set.seed(147)
x <- runif(9600)
diehard_results <- diehard_permtest(x, chunk_size = 4)
expect_equal(unname(diehard_results$perm_counts),
c(104, 81, 106, 101, 90, 81, 108, 92, 105, 100, 111, 111, 114,
99, 107, 86, 112, 108, 101, 94, 106, 92, 96, 94))
expect_equal(diehard_results$p_value, 0.5750799, tolerance = 1e-06)
})
x <- my_lcg(1000, x0=12, m=1024, a=1, c=1)
diehard_results <- diehard_permtest(x, chunk_size = 3)
diehard_results
test_that("Diehard test 3", {
x <- my_lcg(1000, x0=12, m=1024, a=1, c=1)
diehard_results <- diehard_permtest(x, chunk_size = 3)
expect_equal(unname(diehard_results$perm_counts),
c(333, 0, 0, 0, 0, 0))
expect_equal(diehard_results$p_value, 0, tolerance = 1e-06)
})
x <- my_lcg(18000, x0=50, m=2^32, a=1664525, c=1013904223)
diehard_results <- diehard_permtest(x, chunk_size = 3)
diehard_results
test_that("Diehard test 4", {
x <- my_lcg(18000, x0=50, m=2^32, a=1664525, c=1013904223)
diehard_results <- diehard_permtest(x, chunk_size = 3)
expect_equal(unname(diehard_results$perm_counts),
c(986, 1041, 969, 983, 1028, 993))
expect_equal(diehard_results$p_value, 0.5551893, tolerance = 1e-06)
})
library(testthat)
test_that("ECDF test 1", {
set.seed(3)
x <- runif(100)
expect_equal(my_ecdf1(x, seq(0, 1, 0.1)),
ecdf(x)(seq(0, 1, 0.1)))
})
?runif
?.Random.seed
bitwShiftR(3, 1)
bitwShiftL(3, 1)
bitwShiftL(3, 2)
bitwShiftR(3, 2)
bitwShiftR(3, 3)
bitwShiftL(2147483647, 1)
bitwShiftR(3, 1)
bitwShiftL(2147483647, 1)
intToBits(3)
as.numeric(intToBits(3))
rev(as.numeric(intToBits(3)))
paste0(rev(as.numeric(intToBits(3))), sep="")
paste0(rev(as.numeric(intToBits(3))), concatenate="")
?paste0
paste0(rev(as.numeric(intToBits(3))), collapse="")
paste0(rev(as.numeric(intToBits(-3))), collapse="")
paste0(rev(as.numeric(intToBits(.Machine.int.max))), collapse="")
paste0(rev(as.numeric(intToBits(.Machine$integer.max))), collapse="")
paste0(rev(as.numeric(intToBits(.Machine$integer.min))), collapse="")
.Machine$integer.min
paste0(rev(as.numeric(intToBits(-1 * .Machine$integer.min))), collapse="")
-1 * .Machine$integer.min
paste0(rev(as.numeric(intToBits(-1 * .Machine$integer.max))), collapse="")
paste0(rev(as.numeric(intToBits(–2147483648))), collapse="")
paste0(rev(as.numeric(intToBits(–2147483647))), collapse="")
paste0(rev(as.numeric(intToBits(2147483647))), collapse="")
paste0(rev(as.numeric(intToBits(-2147483647))), collapse="")
paste0(rev(as.numeric(intToBits(-2147483648))), collapse="")
intToBits(-2147483648)
packBits(intToBits(-2147483648), "integer")
packBits(intToBits(-2147483647), "integer")
.Machine$integer.max
paste0(rev(as.numeric(intToBits(2147483648))), collapse="")
paste0(rev(as.numeric(intToBits(2147483647))), collapse="")
paste0(rev(as.numeric(intToBits(-2147483647))), collapse="")
2^{32}
2^{31}
paste0(rev(as.numeric(intToBits(-2147483646))), collapse="")
paste0(rev(as.numeric(intToBits(-1))), collapse="")
paste0(rev(as.numeric(intToBits(-2))), collapse="")
paste0(rev(as.numeric(intToBits(0))), collapse="")
paste0(rev(as.numeric(intToBits(1))), collapse="")
2^32
2^32 - 1
paste0(rev(as.numeric(intToBits(NA))), collapse="")
.Machine$double.max.exp
.Machine$double.xmax
.Random.seed
?.Random.seed
Rcpp::cppFunction('arma::vec my_lcgC(int n, unsigned x0, unsigned long m = 4294967296, unsigned a = 1664525, unsigned c = 1013904223){
arma::uvec x(n+1);
x[0] = x0;
for(int i = 0; i < n; i++){
x[i+1] = (a*x[i] + c) % m;
}
arma::vec u = arma::conv_to<arma::vec>::from(x);
return u/m;
}', depends = "RcppArmadillo")
my_samp2 <- my_lcgC(1000, x0=21)
Rcpp::cppFunction('arma::vec my_lcgC(int n, unsigned x0, unsigned long m = 4294967296, unsigned a = 1664525, unsigned c = 1013904223){
arma::uvec x(n+1);
x[0] = x0;
for(int i = 0; i < n; i++){
x[i+1] = (a*x[i] + c) % m;
}
arma::vec u = arma::conv_to<arma::vec>::from(x);
return u/m;
}', depends = "RcppArmadillo")
Rcpp::cppFunction('int sumC(int x, int y){
return x + y;
}')
install.packages("Rcpp")
install.packages("Rcpp")
Rcpp::cppFunction('int sumC(int x, int y){
return x + y;
}')
Rcpp::cppFunction('int sumC(int x, int y){
return x + y;
}')
Rcpp::cppFunction('int sumC(int x, int y){
return x + y;
}')
Rcpp::cppFunction('int sumC(int x, int y){
return x + y;
}')
70000*1.03
70000*1.03*1.03
70000*1.03*1.03*1.03
70000*1.02*1.02*1.02
0.8*95000
0.8*75000
72*1.02*1.02*1.02
72*1.03*1.03*1.03
88*1.03*1.03*1.03
library(robotstxt)
install.packages("robotstxt")
library(robotstxt)
paths_allowed("https://tsl.news/category/opinions/")
paths_allowed(" https://taskmaster.fandom.com/wiki/Series_15")
paths_allowed("https://taskmaster.fandom.com/wiki/Series_15")
paths_allowed("https://taskmaster.fandom.com/wiki/Series_15/")
paths_allowed("https://taskmaster.fandom.com/wiki/Series_15/")
paths_allowed("https://genius.com/Manchester-orchestra-the-gold-lyrics")
course <- list("number" = "STA379",
"instructor" = "Evans",
"room" = "Manchester 229",
"students" = c("Martin Wainwright", "Michael Jordan", "Regina Liu"))
course[[1]]
course["number"]
course$number
course[[1]]
course[["number"]]
course$number
x <- rnorm(100)
y <- 0.2*x + rnorm(100)
m1 <- lm(y ~ x)
class(m1)
typeof(m1)
x <- rnorm(100)
y <- 0.2*x + rnorm(100)
m1 <- lm(y ~ x)
typeof(m1)
length(m1)
m1$coefficients
?paths_allowed
paths_allowed("https://genius.com/")
n <- 1000
m = 16
a = 5
c = 3
x0 <- 1
x <- rep(NA, n)
x[1] <- x0
for(i in 2:n){
x[i] <- (a * x[i-1] + c) %% m
}
u <- x/m
x[1:16]
x[1:16]
x[17:32]
x[1:16]
x[17:32]
length(unique(x))
grid_pts <- seq(0, 1, 0.01) # points t at which to evaluate empirical cdf
plot(grid_pts, ecdf(x)(grid_pts), xlab = "t", ylab = "Fhat(t)")
grid_pts <- seq(0, 1, 0.01) # points t at which to evaluate empirical cdf
plot(grid_pts, ecdf(u)(grid_pts), xlab = "t", ylab = "Fhat(t)")
grid_pts <- seq(0, 1, 0.01) # points t at which to evaluate empirical cdf
plot(grid_pts, ecdf(u)(grid_pts), xlab = "t", ylab = "Fhat(t)", type="l")
n <- 1000
m = 2^32
a = 1664525
c = 1013904223
x0 <- 1
x <- rep(NA, n)
x[1] <- x0
for(i in 2:n){
x[i] <- (a * x[i-1] + c) %% m
}
u <- x/m
plot(grid_pts, ecdf(u)(grid_pts), xlab = "t", ylab = "Fhat(t)", type="l")
n <- 1000
m = 1024
a = 1
c = 1
x0 <- 12
x <- rep(NA, n)
x[1] <- x0
for(i in 2:n){
x[i] <- (a * x[i-1] + c) %% m
}
u2 <- x/m
plot(grid_pts, ecdf(u2)(grid_pts), xlab = "t", ylab = "Fhat(t)", type="l")
head(u)
head(u2)
(13 * 5 + 3) %% 16
setwd("~/Documents/Teaching/sta379-s25/sta379-s25.github.io/practice_questions")
Rcpp::sourceCpp("pq_4_solutions.cpp")
p_norm_C(1:3)
p_norm_C(1)
p_norm_C(1, 0.5)
p_norm_C(0, 0.5)
p_norm_C(c(-1, 1), 1)
p_norm_C(c(-1, 1))
sqrt(2)
p_norm_C(c(0, 2))
p_norm_C(c(0, 3))
Rcpp::sourceCpp("pq_4_solutions.cpp")
kurtosis_C(1:3)
kurtosis_C(1:30)
Rcpp::sourceCpp("pq_4_solutions.cpp")
Rcpp::sourceCpp("pq_4_solutions.cpp")
test_C(1:5)
Rcpp::sourceCpp("pq_4_solutions.cpp")
test_C(1, 1)
test_C(c(1, 1))
test_C(c(1, -1))
Rcpp::sourceCpp("pq_4_solutions.cpp")
kurtosis_C(1:5)
Rcpp::sourceCpp("pq_4_solutions.cpp")
x <- rnorm(100)
y <- rnorm(100)
cor(x, y)
cor_C(x, y)
Rcpp::sourceCpp("pq_4_solutions.cpp")
cor_C(x, y)
?Sys.time
