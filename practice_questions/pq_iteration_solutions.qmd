---
title: "Iteration practice questions: solutions"
format: html
---

```{r include=F}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(error = T)
```

1.

```{r}
x <- seq(from=0, to=1, by=0.1)
cube_root_x <- rep(0, length(x))
for(i in 1:length(x)){
  cube_root_x[i] <- x[i]^(1/3)
}
cube_root_x
```

**Note:** the exponent needs to be in parentheses! E.g. `5^1/3` is not the same as `5^(1/3)`

2.

```{r}
x <- seq(from=0, to=2, by=0.05)
cube_root_x <- rep(0, length(x))
for(i in 1:length(x)){
  cube_root_x[i] <- x[i]^(1/3)
}
cube_root_x
```

3.

```{r}
x <- seq(from=0, to=1, by=0.1)
cube_root_x <- x^(1/3)
cube_root_x
```

4.

```{r}
n <- 1000
normal_sample <- rep(NA, n)
for(i in 1:n){
  normal_sample[i] <- rnorm(n=1, mean=0, sd=1)
}
hist(normal_sample)
```

5.

```{r}
normal_sample <- rnorm(1000)
hist(normal_sample)
```


6.

```{r}
output <- rep(NA, 10)
for(i in 1:5){
  output[i] <- i
}

output[6]
```

7.

```{r}
output <- rep(0, 10)
for(i in 1:10){
  output[i] <- i
}

output[6]
```

8. 

```{r}
output <- rep(0, 10)
for(i in 1:10){
  output[i] <- i
}

output[11]
```

**Note:** trying to access an index that doesn't exist in a vector will result in an NA. Doing so in a matrix will result in an error (`subscript out of bounds`)

9. 

```{r}
output <- rep(1, 10)
for(i in 2:10){
  output[i] <- i + output[i-1]
}

output[5]
```

10. 

```{r}
output <- rep(1, 10)
for(i in 2:10){
  output[i] <- i + output[i+1]
}

output[5]
```

11.

```{r}
x <- list()
for(i in 1:10){
  x[i] <- i
}
x[2] + 1
```

Error occurs because you can't do arithmetic with a list

12.

```{r}
mat <- matrix(0, nrow=5, ncol=3)
for(i in 1:5){
  for(j in 1:3){
    mat <- i + j
  }
}

mat
```

13.

```{r}
mat <- matrix(0, nrow=5, ncol=3)
for(i in 1:5){
  for(j in 1:3){
    mat[j, i] <- i + j
  }
}

mat
```

Error occurs because `i` goes from 1 to 5, but is being used to index the *columns* of a $5 \times 3$ matrix.

14.

```{r}
mat <- matrix(1, 3, 3)
for(i in 2:3){
  for(j in 2:3){
    mat[i,j] <- mat[i-1, j-1] + mat[i, j-1]
  }
}

mat
```

15.

```{r}
f1 <- function(n, groups){
  x <- matrix(1, nrow=n, ncol=n)
  unique_groups = unique(groups)
  means <- matrix(nrow = length(unique_groups), ncol = n)
  for(i in 1:length(unique_groups)){
    means[i,] <- colMeans(x[groups == unique_groups[i],])
  }
  
  return(means)
}

f1(5, groups = c(1, 1, 2, 2, 2))
```