---
title: "Practice Questions: Acceptance-rejection sampling"
format: html
---

## Acceptance-rejection sampling

Previously, we discussed transformation methods for sampling from a variety of distributions. These transformations, however, require us to either invert the cdf, or find a different tranformation (e.g. the Box-Muller Transformation for the Normal distribution).

Another method for sampling from a continuous distribution of interest is acceptance-rejection sampling. Suppose we wish to sample a continuous random variable with density $f$ (the *target density*), and we have the ability to sample from some other distribution with probability function $g$ (the *candidate density*), such that for some $c > 0$,

$$\frac{f(t)}{g(t)} \leq c \hspace{1cm} \text{for all } t \text{ where } f(t) > 0$$


Acceptance-rejection sampling then generates $X \sim f$ as follows:

1. Sample $Y \sim g$
2. Sample $U \sim Uniform(0, 1)$
3. If $U \leq \dfrac{f(Y)}{cg(Y)}$, set $X = Y$. Otherwise, return to step 1.

In this activity, you will implement acceptance-rejection sampling for the Beta example discussed in class.

## Beta distribution

Suppose we wish to sample $X \sim Beta(\alpha, \beta)$, with density $f(x) = \frac{\Gamma(\alpha + \beta)}{\Gamma(\alpha)\Gamma(\beta)} x^{\alpha - 1} (1 - x)^{\beta - 1}$.

For the purposes of this activity, suppose we are particularly interested in a $Beta(2.7, 6.3)$ distribution. The Beta distribution is supported on $(0, 1)$, so a possible candidate distribution is $Y \sim Uniform(0, 1)$ (i.e., $g(t) = 1$ for all $t \in (0, 1)$):

```{r, echo=F}
gridpts <- seq(0, 1, 0.01)
x <- dbeta(gridpts, 2.7, 6.3)
y <- dunif(gridpts)
c = 2.68
plot(gridpts,x,xlim=c(0,1),ylim=c(0,2.8),type="l",col="blue",main="",xlab="",ylab="",
     lwd=1.5)
lines(gridpts,c*y,col="red", lwd=1.5)
legend(.55,2,c("Target density, f(t)","c * g(t)"),lty=c(1,1),col=c("blue","red"))
```

In this example, it can be shown that $c = 2.70$.

### Your task

1. Use acceptance-rejection sampling to sample 1000 draws from this $Beta(2.7, 6.3)$ distribution.

Hints: 

* use a while loop until you have reached the desired number of samples
* the `dbeta` function can be used to evaluate $f(y)$...

Here is some code to get you started:

```{r, eval=F}
n <- 1000 # desired sample size
c <- 2.7
x <- rep(NA, n)
k <- 0 # number of acceptances

while(k < n){
  # sample y ~ g
  # sample u ~ U(0, 1)
  # check if u <= f(y)/(cg(y))
  #   if yes, accept y
  #   if no, reject y
}
```

2. We can then compare the output to the true distribution using the empirical cdf:

```{r, echo=F}
n <- 1000 # desired sample size
c <- 2.7
x <- rep(NA, n)
k <- 0 # number of acceptances

while(k < n){
  y <- runif(1)
  u <- runif(1)
  if(u < dbeta(y, 2.7, 6.3)/c){
    k <- k + 1
    x[k] <- y
  }
}
```


```{r}
gridpts <- seq(0, 1, 0.01)

plot(gridpts, ecdf(x)(gridpts), type="l", xlab="x", ylab="cdf")
lines(gridpts, pbeta(gridpts, 2.7, 6.3), type="l", col="orange")
```


